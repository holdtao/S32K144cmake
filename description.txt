1. Example Description
    This application demonstrates the usage of the Wdg Driver.
    The application includes an EB Tresos project that configures the Mcu, Platform, Gpt and Wdg drivers.
    1.1 The application software functionality
            - Mcu_Init, Mcu_InitClock, Mcu_DistributePllClock, Mcu_SetMode
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                    The clock configuration that is used will enable and use the PLL as source clock.
            - Platform_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - Platform_InstallIrqHandler
            - Platform_SetIrq
                    Install the ISR for the LPIT timer used by the Gpt driver and the WDOG used by the Wdg driver
                    Install the ISR for the FTM timer used by the Gpt driver and the EWM used by the Wdg driver
            - Gpt_Init, Gpt_EnableNotification
                    Initialize the Gpt driver, to start the selected timer and to enable its notification that will be used for periodically servicing Wdg.
            - Wdg_43_Instance0_Init, Wdg_43_Instance0_SetTriggerCondition, Wdg_43_Instance0_SetMode, Wdg_43_Instance1_Init, Wdg_43_Instance1_SetTriggerCondition, Wdg_43_Instance1_SetMode
                    Initialize the Wdg driver, service the Wdg in order to avoid a Wdg timeout and change the mode of operation
            - If the result is correct, the program will go to the end of code without getting reset by Wdg timeout expired.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K144EVB-Q100 PCB 29248 RevA SCH RevC
            - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
            - 1 Micro USB cable
        2.2.2 Connections
        2.2.3 Debugger
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.
         
3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.2 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                         |     Description
        -------------------------------------------------------------------------------------------
        Wdg_Example_S32K144_Debug_FLASH_PNE        | Debug the FLASH configuration using PnE Debugger
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.