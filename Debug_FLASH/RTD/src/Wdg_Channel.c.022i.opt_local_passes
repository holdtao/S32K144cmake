Wdg_ChannelGetVersionInfo (const Wdg_Ipw_InstanceType Wdg_Instance, struct Std_VersionInfoType * pVersioninfo)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pVersioninfo_2(D)->vendorID = 43;
  # DEBUG BEGIN_STMT
  pVersioninfo_2(D)->moduleID = 102;
  # DEBUG BEGIN_STMT
  pVersioninfo_2(D)->sw_major_version = 1;
  # DEBUG BEGIN_STMT
  pVersioninfo_2(D)->sw_minor_version = 0;
  # DEBUG BEGIN_STMT
  pVersioninfo_2(D)->sw_patch_version = 0;
  return;

}


Wdg_ChannelSetTriggerCondition (const Wdg_Ipw_InstanceType Wdg_Instance, uint16 u16Timeout)
{
  Gpt_ValueType uElapsedTime;
  const struct Wdg_ConfigType * _1;
  unsigned char _2;
  long unsigned int _3;
  const struct Wdg_ConfigType * _4;
  unsigned char _5;
  long unsigned int _6;
  const struct Wdg_ConfigType * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  uElapsedTime_12 = 0;
  # DEBUG uElapsedTime => uElapsedTime_12
  # DEBUG BEGIN_STMT
  _1 = Wdg_apConfigPtr[Wdg_Instance_14(D)];
  _2 = _1->Wdg_TimerChannel;
  uElapsedTime_16 = Gpt_GetTimeElapsed (_2);
  # DEBUG uElapsedTime => uElapsedTime_16
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _3 = Wdg_au32Timeout[Wdg_Instance_14(D)];
  if (uElapsedTime_16 > _3)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (u16Timeout_18(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Wdg_au32Timeout[Wdg_Instance_14(D)] = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _4 = Wdg_apConfigPtr[Wdg_Instance_14(D)];
  _5 = _4->Wdg_TimerChannel;
  Gpt_StopTimer (_5);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) u16Timeout_18(D);
  _7 = Wdg_apConfigPtr[Wdg_Instance_14(D)];
  _8 = _7->Wdg_u32TriggerSourceClock;
  _9 = _6 * _8;
  _10 = uElapsedTime_16 + _9;
  Wdg_au32Timeout[Wdg_Instance_14(D)] = _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_05 ();

  <bb 6> :
  return;

}


Wdg_ChannelSetMode (const Wdg_Ipw_InstanceType Wdg_Instance, WdgIf_ModeType Mode)
{
  Std_ReturnType valid;
  Std_ReturnType ret;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_3 = 1;
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  valid_4 = 1;
  # DEBUG valid => valid_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  valid_9 = Wdg_ChannelValidateMode (Mode_6(D), 1, 17, Wdg_Instance_7(D));
  # DEBUG valid => valid_9
  # DEBUG BEGIN_STMT
  if (valid_9 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valid_11 = Wdg_DoChannelSetMode (Wdg_Instance_7(D), Mode_6(D));
  # DEBUG valid => valid_11
  # DEBUG BEGIN_STMT
  ret_13 = Wdg_VadidateDoChannelSetMode (Wdg_Instance_7(D), Mode_6(D), valid_11);
  # DEBUG ret => ret_13

  <bb 4> :
  # ret_1 = PHI <ret_3(2), ret_13(3)>
  # DEBUG ret => ret_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ret_1;
  return _14;

}


Wdg_ChannelInit (const Wdg_Ipw_InstanceType Wdg_Instance, const struct Wdg_ConfigType * pConfigPtr)
{
  Std_ReturnType valid;
  <unnamed type> _1;
  short unsigned int _2;
  const struct Wdg_ConfigType * _3;
  <unnamed type> _4;
  const struct Wdg_ConfigType * _5;
  <unnamed type> _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_10 = 1;
  # DEBUG valid => valid_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Wdg_apConfigPtr[Wdg_Instance_12(D)] = pConfigPtr_13(D);
  # DEBUG BEGIN_STMT
  _1 = Wdg_aePreviousMode[Wdg_Instance_12(D)];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Wdg_au16CfgInitialTimeout[Wdg_Instance_12(D)];
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = Wdg_apConfigPtr[Wdg_Instance_12(D)];
  _4 = _3->Wdg_DefaultMode;
  valid_16 = Wdg_ChannelValidateMode (_4, 0, 18, Wdg_Instance_12(D));
  # DEBUG valid => valid_16
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  valid_17 = 1;
  # DEBUG valid => valid_17

  <bb 6> :
  # valid_7 = PHI <valid_16(4), valid_17(5)>
  # DEBUG valid => valid_7
  # DEBUG BEGIN_STMT
  valid_19 = Wdg_InitialHardware (Wdg_Instance_12(D), valid_7);
  # DEBUG valid => valid_19
  # DEBUG BEGIN_STMT
  valid_21 = Wdg_VadidateHardwareSetting (Wdg_Instance_12(D), valid_19);
  # DEBUG valid => valid_21
  # DEBUG BEGIN_STMT
  if (valid_21 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Wdg_ChannelStartGpt (Wdg_Instance_12(D));
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  _5 = Wdg_apConfigPtr[Wdg_Instance_12(D)];
  _6 = _5->Wdg_DefaultMode;
  Wdg_aePreviousMode[Wdg_Instance_12(D)] = _6;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_02 ();

  <bb 8> :
  return;

}


Wdg_ChannelStartGpt (const Wdg_Ipw_InstanceType Wdg_Instance)
{
  const struct Wdg_ConfigType * _1;
  unsigned char _2;
  const struct Wdg_ConfigType * _3;
  const struct Wdg_ConfigType * _4;
  <unnamed type> _5;
  const struct Wdg_ModeType * _6;
  long unsigned int _7;
  const struct Wdg_ConfigType * _8;
  unsigned char _9;
  const struct Wdg_ConfigType * _10;
  <unnamed type> _11;
  const struct Wdg_ConfigType * _12;
  unsigned char _13;
  long unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;
  const struct Wdg_ConfigType * _17;
  long unsigned int _18;
  long unsigned int _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _2 = _1->Wdg_TimerChannel;
  Gpt_StopTimer (_2);
  # DEBUG BEGIN_STMT
  _3 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _4 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _5 = _4->Wdg_DefaultMode;
  _6 = _3->Wdg_ModeSettings[_5];
  _7 = _6->Wdg_u32TimerTriggeringPeriod;
  Wdg_au32GptPeriod[Wdg_Instance_22(D)] = _7;
  # DEBUG BEGIN_STMT
  _8 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _9 = _8->Wdg_TimerChannel;
  Gpt_EnableNotification (_9);
  # DEBUG BEGIN_STMT
  _10 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _11 = _10->Wdg_DefaultMode;
  if (_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _12 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _13 = _12->Wdg_TimerChannel;
  _14 = Wdg_au32GptPeriod[Wdg_Instance_22(D)];
  Gpt_StartTimer (_13, _14);

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _15 = Wdg_au16CfgInitialTimeout[Wdg_Instance_22(D)];
  _16 = (long unsigned int) _15;
  _17 = Wdg_apConfigPtr[Wdg_Instance_22(D)];
  _18 = _17->Wdg_u32TriggerSourceClock;
  _19 = _16 * _18;
  Wdg_au32Timeout[Wdg_Instance_22(D)] = _19;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_01 ();
  return;

}


Wdg_VadidateDoChannelSetMode (const Wdg_Ipw_InstanceType Wdg_Instance, const WdgIf_ModeType mode, const Std_ReturnType status)
{
  uint32 u32Temp;
  Gpt_ValueType uElapsedTime;
  Std_ReturnType valid;
  const struct Wdg_ConfigType * _1;
  unsigned char _2;
  const struct Wdg_ConfigType * _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  const struct Wdg_ConfigType * _7;
  const struct Wdg_ModeType * _8;
  long unsigned int _9;
  const struct Wdg_ConfigType * _10;
  unsigned char _11;
  long unsigned int _12;
  Std_ReturnType _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_18 = status_17(D);
  # DEBUG valid => valid_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (valid_18 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Wdg_apConfigPtr[Wdg_Instance_20(D)];
  _2 = _1->Wdg_TimerChannel;
  Gpt_StopTimer (_2);
  # DEBUG BEGIN_STMT
  _3 = Wdg_apConfigPtr[Wdg_Instance_20(D)];
  _4 = _3->Wdg_TimerChannel;
  uElapsedTime_23 = Gpt_GetTimeElapsed (_4);
  # DEBUG uElapsedTime => uElapsedTime_23
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _5 = Wdg_au32Timeout[Wdg_Instance_20(D)];
  if (uElapsedTime_23 > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32Temp_26 = 0;
  # DEBUG u32Temp => u32Temp_26
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = Wdg_au32Timeout[Wdg_Instance_20(D)];
  u32Temp_25 = _6 - uElapsedTime_23;
  # DEBUG u32Temp => u32Temp_25

  <bb 6> :
  # u32Temp_14 = PHI <u32Temp_26(4), u32Temp_25(5)>
  # DEBUG u32Temp => u32Temp_14
  # DEBUG BEGIN_STMT
  Wdg_au32Timeout[Wdg_Instance_20(D)] = u32Temp_14;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _7 = Wdg_apConfigPtr[Wdg_Instance_20(D)];
  _8 = _7->Wdg_ModeSettings[mode_29(D)];
  _9 = _8->Wdg_u32TimerTriggeringPeriod;
  Wdg_au32GptPeriod[Wdg_Instance_20(D)] = _9;
  # DEBUG BEGIN_STMT
  if (mode_29(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Wdg_apConfigPtr[Wdg_Instance_20(D)];
  _11 = _10->Wdg_TimerChannel;
  _12 = Wdg_au32GptPeriod[Wdg_Instance_20(D)];
  Gpt_StartTimer (_11, _12);

  <bb 8> :
  # DEBUG BEGIN_STMT
  valid_32 = 0;
  # DEBUG valid => valid_32
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_04 ();
  # DEBUG BEGIN_STMT
  Wdg_aePreviousMode[Wdg_Instance_20(D)] = mode_29(D);
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_04 ();

  <bb 9> :
  # valid_13 = PHI <valid_18(2), valid_32(8)>
  # DEBUG valid => valid_13
  # DEBUG BEGIN_STMT
  _36 = valid_13;
  return _36;

}


Wdg_DoChannelSetMode (const Wdg_Ipw_InstanceType Wdg_Instance, const WdgIf_ModeType mode)
{
  Std_ReturnType valid;
  unsigned char _1;
  const struct Wdg_ConfigType * _2;
  const struct Wdg_ModeType * _3;
  const struct Wdg_Ipw_ConfigType * _4;
  <unnamed type> _5;
  const struct Wdg_ConfigType * _6;
  const struct Wdg_ModeType * _7;
  const struct Wdg_Ipw_ConfigType * _8;
  unsigned char _9;
  const struct Wdg_ConfigType * _10;
  const struct Wdg_ModeType * _11;
  const struct Wdg_Ipw_ConfigType * _12;
  Std_ReturnType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_15 = 0;
  # DEBUG valid => valid_15
  # DEBUG BEGIN_STMT
  if (mode_16(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Wdg_Ipw_StopTimer (Wdg_Instance_18(D));
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _3 = _2->Wdg_ModeSettings[mode_16(D)];
  _4 = _3->Wdg_Ipw_pConfig;
  valid_28 = Wdg_Ipw_SetMode (Wdg_Instance_18(D), _4);
  # DEBUG valid => valid_28
  goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  valid_26 = 1;
  # DEBUG valid => valid_26
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = Wdg_aePreviousMode[Wdg_Instance_18(D)];
  if (_5 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _7 = _6->Wdg_ModeSettings[mode_16(D)];
  _8 = _7->Wdg_Ipw_pConfig;
  _9 = Wdg_Ipw_SetMode (Wdg_Instance_18(D), _8);
  if (_9 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  valid_24 = Wdg_Ipw_StartTimer (Wdg_Instance_18(D));
  # DEBUG valid => valid_24
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  valid_22 = 1;
  # DEBUG valid => valid_22
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _11 = _10->Wdg_ModeSettings[mode_16(D)];
  _12 = _11->Wdg_Ipw_pConfig;
  valid_20 = Wdg_Ipw_SetMode (Wdg_Instance_18(D), _12);
  # DEBUG valid => valid_20

  <bb 11> :
  # valid_13 = PHI <valid_26(5), valid_22(9), valid_20(10), valid_28(4), valid_24(8)>
  # DEBUG valid => valid_13
  # DEBUG BEGIN_STMT
  _29 = valid_13;
  return _29;

}


Wdg_VadidateHardwareSetting (const Wdg_Ipw_InstanceType Wdg_Instance, const Std_ReturnType status)
{
  Std_ReturnType valid;
  Std_ReturnType _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_3 = status_2(D);
  # DEBUG valid => valid_3
  # DEBUG BEGIN_STMT
  if (valid_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Wdg_apConfigPtr[Wdg_Instance_5(D)] = 0B;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = valid_3;
  return _7;

}


Wdg_InitialHardware (const Wdg_Ipw_InstanceType Wdg_Instance, const Std_ReturnType status)
{
  Std_ReturnType valid;
  const struct Wdg_ConfigType * _1;
  <unnamed type> _2;
  const struct Wdg_ConfigType * _3;
  const struct Wdg_ConfigType * _4;
  <unnamed type> _5;
  const struct Wdg_ModeType * _6;
  const struct Wdg_Ipw_ConfigType * _7;
  const struct Wdg_ConfigType * _8;
  const struct Wdg_ConfigType * _9;
  <unnamed type> _10;
  const struct Wdg_ModeType * _11;
  const struct Wdg_Ipw_ConfigType * _12;
  Std_ReturnType _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_16 = status_15(D);
  # DEBUG valid => valid_16
  # DEBUG BEGIN_STMT
  if (valid_16 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _2 = _1->Wdg_DefaultMode;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _4 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _5 = _4->Wdg_DefaultMode;
  _6 = _3->Wdg_ModeSettings[_5];
  _7 = _6->Wdg_Ipw_pConfig;
  valid_22 = Wdg_Ipw_SetMode (Wdg_Instance_18(D), _7);
  # DEBUG valid => valid_22
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _9 = Wdg_apConfigPtr[Wdg_Instance_18(D)];
  _10 = _9->Wdg_DefaultMode;
  _11 = _8->Wdg_ModeSettings[_10];
  _12 = _11->Wdg_Ipw_pConfig;
  valid_20 = Wdg_Ipw_Init (Wdg_Instance_18(D), _12);
  # DEBUG valid => valid_20

  <bb 6> :
  # valid_13 = PHI <valid_16(2), valid_22(4), valid_20(5)>
  # DEBUG valid => valid_13
  # DEBUG BEGIN_STMT
  _23 = valid_13;
  return _23;

}


Wdg_ChannelValidateMode (WdgIf_ModeType Wdg_Mode, Wdg_ServiceIdType uServiceId, Wdg_ErrorIdType uErrorId, const Wdg_Ipw_InstanceType Wdg_Instance)
{
  boolean modeFailedErrActive;
  boolean disableRejectedErrActive;
  Std_ReturnType valid;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valid_2 = 0;
  # DEBUG valid => valid_2
  # DEBUG BEGIN_STMT
  disableRejectedErrActive_3 = 0;
  # DEBUG disableRejectedErrActive => disableRejectedErrActive_3
  # DEBUG BEGIN_STMT
  modeFailedErrActive_4 = 0;
  # DEBUG modeFailedErrActive => modeFailedErrActive_4
  # DEBUG BEGIN_STMT
  if (Wdg_Mode_5(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (Wdg_Mode_5(D) != 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (Wdg_Mode_5(D) != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  modeFailedErrActive_6 = 1;
  # DEBUG modeFailedErrActive => modeFailedErrActive_6
  # DEBUG BEGIN_STMT
  valid_7 = 1;
  # DEBUG valid => valid_7

  <bb 6> :
  # valid_1 = PHI <valid_2(2), valid_2(3), valid_2(4), valid_7(5)>
  # DEBUG valid => valid_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = valid_1;
  return _8;

}


Wdg_Cbk_GptNotification1 ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Wdg_ChannelTrigger (1);
  return;

}


Wdg_Cbk_GptNotification0 ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Wdg_ChannelTrigger (0);
  return;

}


Wdg_ChannelTrigger (const Wdg_Ipw_InstanceType Wdg_Instance)
{
  uint32 u32TempTimeout;
  long unsigned int _1;
  long unsigned int _2;
  const struct Wdg_ConfigType * _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Wdg_WDG_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _1 = Wdg_au32Timeout[Wdg_Instance_10(D)];
  _2 = Wdg_au32GptPeriod[Wdg_Instance_10(D)];
  if (_1 < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _3 = Wdg_apConfigPtr[Wdg_Instance_10(D)];
  _4 = _3->Wdg_TimerChannel;
  Gpt_StopTimer (_4);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = Wdg_au32Timeout[Wdg_Instance_10(D)];
  _6 = Wdg_au32GptPeriod[Wdg_Instance_10(D)];
  u32TempTimeout_11 = _5 - _6;
  # DEBUG u32TempTimeout => u32TempTimeout_11
  # DEBUG BEGIN_STMT
  Wdg_au32Timeout[Wdg_Instance_10(D)] = u32TempTimeout_11;
  # DEBUG BEGIN_STMT
  SchM_Exit_Wdg_WDG_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  Wdg_Ipw_Service (Wdg_Instance_10(D));

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


