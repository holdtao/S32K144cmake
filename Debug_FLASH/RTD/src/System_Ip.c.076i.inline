IPA function summary for System_Ip_ConfigIrq/2 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       6
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    System_Ip_ConfigIrqPrivileged/1 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 6 stack: 0

IPA function summary for System_Ip_ConfigIrqPrivileged/1 inlinable
  global time:     8.500000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:2.000000, time:1.000000,  executed if:(op1 == 0),  nonconst if:(op0 changed) && (op1 == 0)
    size:1.000000, time:0.500000,  executed if:(op1 == 0)
    size:1.000000, time:0.500000,  executed if:(op1 != 0),  nonconst if:(op0 changed) && (op1 != 0)
    size:1.000000, time:0.500000,  executed if:(op1 != 0)
  calls:


Flattening functions:
Overall time estimate: 22.500000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in System_Ip_ConfigIrq/2.
Enqueueing calls in System_Ip_ConfigIrqPrivileged/1.

Considering System_Ip_ConfigIrqPrivileged/1 with 12 size
 to be inlined into System_Ip_ConfigIrq/2 in ../RTD/src/System_Ip.c:186
 Estimated badness is -6.222222, frequency 1.00.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 8.500000 weighted by profile: 0.000000

Why inlining failed?
IPA function summary for System_Ip_ConfigIrq/2 inlinable
  global time:     8.500000
  self size:       6
  global size:     12
  min size:       6
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:2.000000, time:1.000000,  executed if:(op1 == 0),  nonconst if:(op0 changed) && (op1 == 0)
    size:1.000000, time:0.500000,  executed if:(op1 == 0)
    size:1.000000, time:0.500000,  executed if:(op1 != 0),  nonconst if:(op1 != 0) && (op0 changed)
    size:1.000000, time:0.500000,  executed if:(op1 != 0)
  calls:
    System_Ip_ConfigIrqPrivileged/1 inlined
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

Symbol table:

System_Ip_ConfigIrq/2 (System_Ip_ConfigIrq) @06e17b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: System_Ip_ConfigIrqPrivileged/1 (inlined) (1073741824 (estimated locally),1.00 per call) 
System_Ip_ConfigIrqPrivileged/1 (System_Ip_ConfigIrqPrivileged) @06e17d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function System_Ip_ConfigIrqPrivileged/1 is inline copy in System_Ip_ConfigIrq/2
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: System_Ip_ConfigIrq/2 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 

;; Function System_Ip_ConfigIrq (System_Ip_ConfigIrq, funcdef_no=2, decl_uid=6194, cgraph_uid=3, symbol_order=2)


Symbols to be put in SSA form
{ D.6221 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
System_Ip_ConfigIrq (System_Ip_IrqType eIrq, boolean bEnable)
{
  uint32 regValTemp;
  long unsigned int _6;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG eIrq => eIrq_2(D)
  # DEBUG bEnable => bEnable_3(D)
  # DEBUG INLINE_ENTRY System_Ip_ConfigIrqPrivileged
  # DEBUG BEGIN_STMT
  regValTemp_5 ={v} MEM[(struct MCM_Type *)3758620672B].ISCR;
  # DEBUG regValTemp => regValTemp_5
  # DEBUG BEGIN_STMT
  if (bEnable_3(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _6 = 1 << eIrq_2(D);
  regValTemp_7 = regValTemp_5 | _6;
  # DEBUG regValTemp => regValTemp_7
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _8 = 1 << eIrq_2(D);
  _9 = ~_8;
  regValTemp_10 = regValTemp_5 & _9;
  # DEBUG regValTemp => regValTemp_10

  <bb 5> [local count: 1073741824]:
  # regValTemp_11 = PHI <regValTemp_7(3), regValTemp_10(4)>
  # DEBUG regValTemp => regValTemp_11
  # DEBUG BEGIN_STMT
  MEM[(struct MCM_Type *)3758620672B].ISCR ={v} regValTemp_11;
  # DEBUG eIrq => NULL
  # DEBUG bEnable => NULL
  # DEBUG regValTemp => NULL
  return;

}


