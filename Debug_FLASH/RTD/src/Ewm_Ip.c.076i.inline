IPA function summary for Ewm_Ip_Refresh.constprop/14 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
  calls:

IPA function summary for Ewm_Ip_IrqHandler/13 inlinable
  global time:     14.250000
  self size:       16
  global size:     16
  min size:       6
  self stack:      0
  global stack:    0
    size:10.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.35 size: 3 time: 15

IPA function summary for Ewm_Ip_Service/12 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Ewm_Ip_Refresh.constprop/14 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 3 stack: 0
       op0 is compile time invariant

IPA function summary for Ewm_Ip_Init/11 inlinable
  global time:     10.002382
  self size:       34
  global size:     34
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:1.999967,  executed if:(not inlined)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 56] changed) && (not inlined)
    size:2.500000, time:0.750000,  nonconst if:(op1[ref offset: 56] changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 48] changed) && (not inlined)
    size:0.500000, time:0.250000,  nonconst if:(op1[ref offset: 48] changed)
    size:2.000000, time:1.000000,  nonconst if:(op1[ref offset: 56] changed || op1[ref offset: 48] changed)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 40] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 40] changed) && (op1[ref offset: 56] != 255)
    size:4.000000, time:0.659983,  executed if:(op1[ref offset: 56] != 255)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:4.500000, time:0.742467,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 56] != 255)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 0] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:6.500000, time:0.412500,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 0] changed) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.054995,  executed if:(op1[ref offset: 0] == 2) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 0] == 2) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.054995,  executed if:(op1[ref offset: 0] == 1) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 0] == 1) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.082492,  executed if:(op1[ref offset: 32] == 0) && (op1[ref offset: 56] != 255)
    size:0.500000, time:0.041246,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 64] changed) && (op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255) && (not inlined)
    size:0.500000, time:0.041246,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 64] changed) && (op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.082492,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255)
  array index:(op0 changed)
  calls:


Flattening functions:
Overall time estimate: 43.252382 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Ewm_Ip_Refresh.constprop/14.
Enqueueing calls in Ewm_Ip_IrqHandler/13.
Enqueueing calls in Ewm_Ip_Service/12.
Enqueueing calls in Ewm_Ip_Init/11.

Considering Ewm_Ip_Refresh.constprop/14 with 7 size
 to be inlined into Ewm_Ip_Service/12 in ../RTD/src/Ewm_Ip.c:374
 Estimated badness is -74.666667, frequency 1.00.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 29.252382 weighted by profile: 0.000000

Why inlining failed?
IPA function summary for Ewm_Ip_IrqHandler/13 inlinable
  global time:     14.250000
  self size:       16
  global size:     16
  min size:       6
  self stack:      0
  global stack:    0
    size:10.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.35 size: 3 time: 15

IPA function summary for Ewm_Ip_Service/12 inlinable
  global time:     5.000000
  self size:       5
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Ewm_Ip_Refresh.constprop/14 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for Ewm_Ip_Init/11 inlinable
  global time:     10.002382
  self size:       34
  global size:     34
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:1.999967,  executed if:(not inlined)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 56] changed) && (not inlined)
    size:2.500000, time:0.750000,  nonconst if:(op1[ref offset: 56] changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 48] changed) && (not inlined)
    size:0.500000, time:0.250000,  nonconst if:(op1[ref offset: 48] changed)
    size:2.000000, time:1.000000,  nonconst if:(op1[ref offset: 56] changed || op1[ref offset: 48] changed)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 40] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 40] changed) && (op1[ref offset: 56] != 255)
    size:4.000000, time:0.659983,  executed if:(op1[ref offset: 56] != 255)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:4.500000, time:0.742467,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 56] != 255)
    size:0.500000, time:0.082500,  executed if:(op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 0] changed) && (op1[ref offset: 56] != 255) && (not inlined)
    size:6.500000, time:0.412500,  executed if:(op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 0] changed) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.054995,  executed if:(op1[ref offset: 0] == 2) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 0] == 2) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.054995,  executed if:(op1[ref offset: 0] == 1) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 0] == 1) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.082492,  executed if:(op1[ref offset: 32] == 0) && (op1[ref offset: 56] != 255)
    size:0.500000, time:0.041246,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255) && (not inlined),  nonconst if:(op1[ref offset: 64] changed) && (op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255) && (not inlined)
    size:0.500000, time:0.041246,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255),  nonconst if:(op1[ref offset: 64] changed) && (op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255)
    size:1.000000, time:0.082492,  executed if:(op1[ref offset: 32] != 0) && (op1[ref offset: 56] != 255)
  array index:(op0 changed)
  calls:

Symbol table:

Ewm_Ip_Refresh.constprop.0/14 (Ewm_Ip_Refresh.constprop) @05d228c0
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function Ewm_Ip_Refresh.constprop/14 is inline copy in Ewm_Ip_Service/12
  Clone of Ewm_Ip_Refresh/3
  Availability: local
  Function flags: count:1073741824 (estimated locally) local optimize_size
  Called by: Ewm_Ip_Service/12 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Ewm_Ip_IrqHandler/13 (Ewm_Ip_IrqHandler) @05d26d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Ewm_Ip_apCallbackPtr/2 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(375809638 (estimated locally),0.35 per call) 
Ewm_Ip_Service/12 (Ewm_Ip_Service) @05d26a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Ewm_Ip_Refresh.constprop/14 (inlined) (1073741824 (estimated locally),1.00 per call) 
Ewm_Ip_Init/11 (Ewm_Ip_Init) @05d267e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Ewm_Ip_apCallbackPtr/2 (write)Ewm_Ip_apCallbackPtr/2 (write)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Ewm_Ip_Refresh/3 (Ewm_Ip_Refresh) @05d220e0
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Ewm_Ip_apCallbackPtr/2 (Ewm_Ip_apCallbackPtr) @05d20240
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Ewm_Ip_Init/11 (write)Ewm_Ip_Init/11 (write)Ewm_Ip_IrqHandler/13 (read)
  Availability: available
  Varpool flags:

;; Function Ewm_Ip_Init (Ewm_Ip_Init, funcdef_no=9, decl_uid=5539, cgraph_uid=10, symbol_order=11)

Ewm_Ip_Init (const uint8 Instance, const struct Ewm_Ip_ConfigType * const ConfigPtr)
{
  uint8_t tempValue;
  Ewm_Ip_StatusType statusCode;
  int _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  <unnamed type> _6;
  void (*<T487>) (void) _7;
  unsigned char iftmp.0_10;
  unsigned char _20;
  _Bool _21;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG statusCode => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG tempValue => 0
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_13(D);
  # DEBUG base => 1074139136B
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG INLINE_ENTRY Ewm_Ip_IsEnabled
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct EWM_Type *)1074139136B].CTRL;
  _21 = (_Bool) _20;
  # DEBUG base => NULL
  # DEBUG isModuleEnabled => _21
  # DEBUG BEGIN_STMT
  if (_21 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
  _2 = ConfigPtr_15(D)->CompareHigh;
  _3 = ConfigPtr_15(D)->CompareLow;
  if (_2 <= _3)
    goto <bb 14>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 268435456]:
  if (_2 == 255)
    goto <bb 14>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 5> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _4 = ConfigPtr_15(D)->Prescaler;
  # DEBUG base => 1074139136B
  # DEBUG value => _4
  # DEBUG INLINE_ENTRY Ewm_Ip_SetPrescaler
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].CLKPRESCALER ={v} _4;
  # DEBUG base => NULL
  # DEBUG value => NULL
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG value => _2
  # DEBUG INLINE_ENTRY Ewm_Ip_SetCompareHigh
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].CMPH ={v} _2;
  # DEBUG base => NULL
  # DEBUG value => NULL
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG value => _3
  # DEBUG INLINE_ENTRY Ewm_Ip_SetCompareLow
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].CMPL ={v} _3;
  # DEBUG base => NULL
  # DEBUG value => NULL
  # DEBUG BEGIN_STMT
  _5 = ConfigPtr_15(D)->InterruptEnable;
  if (_5 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 88583701]:

  <bb 7> [local count: 177167401]:
  # iftmp.0_10 = PHI <9(5), 1(6)>
  # DEBUG tempValue => iftmp.0_10
  # DEBUG BEGIN_STMT
  _6 = ConfigPtr_15(D)->assertLogic;
  switch (_6) <default: <L17> [33.33%], case 1: <L7> [33.33%], case 2: <L8> [33.33%]>

  <bb 8> [local count: 59049895]:
<L7>:
  # DEBUG BEGIN_STMT
  tempValue_17 = iftmp.0_10 | 4;
  # DEBUG tempValue => tempValue_17
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 59049895]:
<L8>:
  # DEBUG BEGIN_STMT
  tempValue_16 = iftmp.0_10 | 6;
  # DEBUG tempValue => tempValue_16
  # DEBUG BEGIN_STMT

  <bb 10> [local count: 177149684]:
  # tempValue_9 = PHI <tempValue_17(8), tempValue_16(9), iftmp.0_10(7)>
<L17>:
  # DEBUG tempValue => tempValue_9
  # DEBUG BEGIN_STMT
  if (_5 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 88574842]:
  # DEBUG BEGIN_STMT
  _7 = ConfigPtr_15(D)->pfEwmCallback;
  Ewm_Ip_apCallbackPtr[_1] = _7;
  goto <bb 13>; [100.00%]

  <bb 12> [local count: 88574842]:
  # DEBUG BEGIN_STMT
  Ewm_Ip_apCallbackPtr[_1] = 0B;

  <bb 13> [local count: 177149684]:
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG value => tempValue_9
  # DEBUG INLINE_ENTRY Ewm_Ip_SetControl
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].CTRL ={v} tempValue_9;

  <bb 14> [local count: 1073724109]:
  # statusCode_8 = PHI <1(3), 0(13), 1(2), 1(4)>
  # DEBUG base => NULL
  # DEBUG value => NULL
  # DEBUG statusCode => statusCode_8
  # DEBUG BEGIN_STMT
  return statusCode_8;

}



;; Function Ewm_Ip_Service (Ewm_Ip_Service, funcdef_no=10, decl_uid=5541, cgraph_uid=11, symbol_order=12)


Symbols to be put in SSA form
{ D.5664 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Ewm_Ip_Service (const uint8 Instance)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY Ewm_Ip_Refresh
  # DEBUG base => 1074139136B
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsid i");
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].SERV ={v} 180;
  # DEBUG BEGIN_STMT
  MEM[(struct EWM_Type *)1074139136B].SERV ={v} 44;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsie i");
  # DEBUG base => NULL
  return;

}



;; Function Ewm_Ip_IrqHandler (Ewm_Ip_IrqHandler, funcdef_no=11, decl_uid=5606, cgraph_uid=12, symbol_order=13)

Ewm_Ip_IrqHandler (uint8 Instance)
{
  int _1;
  void (*<T487>) (void) _2;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_4(D);
  # DEBUG base => 1074139136B
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG INLINE_ENTRY Ewm_Ip_IsIntEnabled
  # DEBUG BEGIN_STMT
  _7 ={v} MEM[(const struct EWM_Type *)1074139136B].CTRL;
  _8 = _7 & 8;
  # DEBUG base => NULL
  if (_8 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 3> [local count: 536870911]:
  # DEBUG BEGIN_STMT
  # DEBUG base => 1074139136B
  # DEBUG INLINE_ENTRY Ewm_Ip_ClearIntenBit
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct EWM_Type *)1074139136B].CTRL;
  _10 = _9 & 247;
  MEM[(struct EWM_Type *)1074139136B].CTRL ={v} _10;
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  _2 = Ewm_Ip_apCallbackPtr[_1];
  if (_2 != 0B)
    goto <bb 4>; [70.00%]
  else
    goto <bb 5>; [30.00%]

  <bb 4> [local count: 375809638]:
  # DEBUG BEGIN_STMT
  _2 ();

  <bb 5> [local count: 1073741824]:
  return;

}


